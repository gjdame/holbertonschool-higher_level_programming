The ``101-lazy_matrix_mul`` module
=================================

Using ``lazy_matrix_mul``
---------------------------------


>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]
>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]
>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 'A']]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_b should contain only integers or floats')
TypeError: m_b should contain only integers or floats
>>> print(lazy_matrix_mul([[1, 'cd']], [[3, 4], [5, 6]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_a should contain only integers or floats')
TypeError: m_a should contain only integers or floats
>>> print(lazy_matrix_mul([[]], [[], []]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise ValueError('m_a and m_b can\'t be multiplied')
ValueError: m_a and m_b can't be multiplied
>>> print(lazy_matrix_mul("GREG", "Greg"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_a must be a list')
TypeError: m_a must be a list
>>> print(lazy_matrix_mul([[]], "Greg"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_b must be a list')
TypeError: m_b must be a list
